单元测试
如果功能移植完成，且DIY已经做了基础的部分则可以开始写单元测试

------------------------------------------------------------------------------------------------

app.RegisterModel

class TestModel : Model {
	string Name { get; set; }
	DateTime CreateTime { get; set; }
}

__MigrateHistory
TableName		LastModifiedOfPluginFiles （or use marshal file last modify time)
TestPlugin_TestModel	Plugin.cs {modify time } TestModel.cs { modify time }

if (LastModifiedOfPluginFiles != ...) {
	Model.Migrate(); // create table, check column type and change, add column ... (or find a automatic solution)
}

using (var context = DatabaseManager.StartContext())
using (var transaction = context.BeginTransaction()) {
	context.BeginTransaction();
	context.Add(...);
	context.AddOrUpdate(...);
	context.Update(...);
	context.BatchAdd(...);
	context.BatchDelete(...);
	context.SaveChanges();
	transaction.Commit();
}

------------------------------------------------------------------------------------------------

/api/testmodel/search
/api/testmodel/add
/api/testmodel/edit
/api/testmodel/update
/api/testmodel/remove

class TestScaffold : Scaffold<TestModel> {
	TestScaffold(Application app) {
		Columns.Add(Resorces.Name, m => m.Name);
		Columns.Add(Resources.CreateTime, m => m.CreateTime);
		Sortable.Add(Resources.CreateTime, m => m.CreateTime);
		Editable.Add(Resources.Name, m => m.Name);
		KeywordFilters.Add((models, keyword) => models.Where(m => m.Name.Contains(keyword));
		SearchConditions.AddTextCondition(Resources.Name, (models, value) => models.Where(m => m.Name == value));
		SearchConditions.AddEnumCondition(...);
		SearchConditions.AddDropdownCondition(...);
		app.Trigger<IOnScaffoldInit<TestModel>>(m => m(this));
	}
}

Scaffold<T> => (abs) AutoForm, AutoAPI, AutoCRUD

-------------------------------------------------------------------------------------------

api
/api_gateway?url=/user/reg&params={encoded}&sign={sha1}
able to pass csrf and security check

-------------------------------------------------------------------------------------------

{% area test_area %}
	{% default_widgets %}
{% endarea %}

转换成

{% area test_area %}
	{% widget ??? %}
	{% widget ??? %}
	{% widget ??? %}
{% endarea %}

html
	<div class='diy_area' area_id='test_area'>
		<div class='diy_widget' widget_id='random_123123123'></div>
		<div class='diy_widget' widget_id='random_123123122'></div>
		<div class='diy_widget' widget_id='random_123123121'></div>
	</div>

diy流程
	转换动态内容到固定内容
		把整个模板中area找出来
		把area中动态导入的所有widget，转换成静态的widget标签
		保存到App_Data/templates下
	编辑和保存
		让用户直接编辑html插入area标签
		让用户添加和拖动widget
		保存编辑后的结构到html中
			构成的html可能有多个，要找出所有用extend和include引入的html
			根据area id查找并保存到对应的html

动态注册widget
	diyManager.RegisterWidget("LOGO", ???);
	diyManager.GetArea("test_area") // DiyArea
		.AddDefaultWidget("LOGO", ???)
		.AddDefaultWidget("Test", ???)
		.AddDefaultWidgetAfter(???)
		.AddDefaultWidgetBefore(???);
	diyManager.GetArea("test_area").DefaultWidgets(); // List<DiyWidget>

widget的格式和参数
	???

规则
	include里面可以有include
	area里面不能有area

-----------------------------------------------------------------------------------------

后台管理
AppManager
	RegisterApp<UserScaffold>() // 可以继承
	RegisterApp<Scaffold<Admin>>() // 也可以用默认的
	RegisterApp(() => new CustomApp());

class CustomApp:
	Name = "测试应用";
	Url = "/admin/custom_app";
	Icon = "css class";

class UserScaffold : Scaffold<User>
	UserScaffold()
		Column = ["Name", "CreateTime"]
		Sortable = ["CreateTime"]
		AddForm = typeof(Form)
		EditForm = typeof(Form)

	class Form : ScaffoldForm<User>
		[TextBox]
		string Name
		[Label]
		string CreateTime

		override void Dump(User user) { }
		override void Bind(User user) { }

继承
	<= ScaffoldForm<T> <= AutoForm <= IForm








