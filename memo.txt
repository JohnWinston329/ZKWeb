
------------------------------------------------------------------------------------------------

app.RegisterModel

class TestModel : Model {
	string Name { get; set; }
	DateTime CreateTime { get; set; }
}

__MigrateHistory
TableName		LastModifiedOfPluginFiles （or use marshal file last modify time)
TestPlugin_TestModel	Plugin.cs {modify time } TestModel.cs { modify time }

if (LastModifiedOfPluginFiles != ...) {
	Model.Migrate(); // create table, check column type and change, add column ... (or find a automatic solution)
}

using (var context = DatabaseManager.StartContext())
using (var transaction = context.BeginTransaction()) {
	context.BeginTransaction();
	context.Add(...);
	context.AddOrUpdate(...);
	context.Update(...);
	context.BatchAdd(...);
	context.BatchDelete(...);
	context.SaveChanges();
	transaction.Commit();
}

------------------------------------------------------------------------------------------------

/api/testmodel/search
/api/testmodel/add
/api/testmodel/edit
/api/testmodel/update
/api/testmodel/remove

class TestScaffold : Scaffold<TestModel> {
	TestScaffold(Application app) {
		Columns.Add(Resorces.Name, m => m.Name);
		Columns.Add(Resources.CreateTime, m => m.CreateTime);
		Sortable.Add(Resources.CreateTime, m => m.CreateTime);
		Editable.Add(Resources.Name, m => m.Name);
		KeywordFilters.Add((models, keyword) => models.Where(m => m.Name.Contains(keyword));
		SearchConditions.AddTextCondition(Resources.Name, (models, value) => models.Where(m => m.Name == value));
		SearchConditions.AddEnumCondition(...);
		SearchConditions.AddDropdownCondition(...);
		app.Trigger<IOnScaffoldInit<TestModel>>(m => m(this));
	}
}

Scaffold<T> => (abs) AutoForm, AutoAPI, AutoCRUD

-------------------------------------------------------------------------------------------

api
/api_gateway?url=/user/reg&params={encoded}&sign={sha1}
able to pass csrf and security check

-------------------------------------------------------------------------------------------

{% area test_area %}
	{% default_widgets %}
{% endarea %}

转换成

{% area test_area %}
	{% widget logo %}
	{% widget login_info %}
	{% widget test_params { a: 1, b: 2, c: 3 } %}
{% endarea %}

文件
	templates/login_info.widget { "Name": { "zh": "登录信息" }, "Params": "参数信息???" }
	templates/login_info.html

html
	<div class='diy_area' area_id='test_area'>
		<div class='diy_widget' widget_id='random_123123123'></div>
		<div class='diy_widget' widget_id='random_123123122'></div>
		<div class='diy_widget' widget_id='random_123123121'></div>
	</div>

diy流程
	转换动态内容到固定内容
		把整个模板中area找出来
		把area中动态导入的所有widget，转换成静态的widget标签
		保存到App_Data/templates下
	编辑和保存
		让用户直接编辑html插入area标签
		让用户添加和拖动widget
		保存编辑后的结构到html中
			构成的html可能有多个，要找出所有用extend和include引入的html
			根据area id查找并保存到对应的html

动态注册widget
	diyManager.GetArea("test_area") // DiyArea
		.AddDefaultWidget("logo")
		.AddDefaultWidget("test_params", new { a: 1, b: 2, c: 3 })
		.AddDefaultWidgetAfter("logo", "login_info")
		.AddDefaultWidgetBefore("logo", "test_params", new { a: 1, b: 2, c: 3 });
	diyManager.GetArea("test_area").DefaultWidgets(); // List<DiyWidget>

规则
	include里面可以有include
	area里面不能有area

-----------------------------------------------------------------------------------------

后台管理
AppManager
	RegisterApp<UserScaffold>() // 可以继承
	RegisterApp<Scaffold<Admin>>() // 也可以用默认的
	RegisterApp(() => new CustomApp());

class CustomApp:
	Name = "测试应用";
	Url = "/admin/custom_app";
	Icon = "css class";

class UserScaffold : Scaffold<User>
	UserScaffold()
		Column = ["Name", "CreateTime"]
		Sortable = ["CreateTime"]
		AddForm = typeof(Form)
		EditForm = typeof(Form)

	class Form : ScaffoldForm<User>
		[TextBox]
		string Name
		[Label]
		string CreateTime

		override void Dump(User user) { }
		override void Bind(User user) { }

继承
	<= ScaffoldForm<T> <= AutoForm <= IForm

-----------------------------------------------------------------------------------------

fetch api from widget

DataApiManager
	DataApiManager
		ResolveMany<IDataApi>()
	AddApi
		Apis[api.Address] = api
		if (api.IsPublic)
			controllerManager.AddAction(api.Address, ...)

IDataApi
	Address "/api/login_info"
	IsPublic = true
	GetData {
		// check privilege
		return new { ... };
	}

{% fetch_api /api/login_info > login_info %}
{{ login_info.username }}

-----------------------------------------------------------------------------------------

auto form

AdminLoginForm : AutoForm
	[TextBox]
	public string Username { get; set; }
	[Password]
	public string Password { get; set; }
	[Captcha]
	public string Captcha { get; set; }	

	Bind() {
		Username = "";
		Password = "";
		Captcha = "";
	}
	
	Save() {
		if (!LoadValues()) {
			return LoadError;	
		}
		// login
		return { success = true; }
	}
	
	ToString() {
		return html;
	}

AdminController
	Login() {
		var form = AdminLoginForm();
		if (IsPost()) {
			return form.Save();
		}
		return new TemplateResult("admin_login.html", new { form = form });
	}

{% raw_html form %}

-----------------------------------------------------------------------------------------

static需要支持返回304

开发任务
ok	测试数据库增删查改和事件绑定（NHibernate支持事件）
ok	把原有ZKWebFramework中的所有功能移植过来
ok	实现static控制器
	添加后台页面
	实现从类生成表单html（AutoForm）
	实现从类生成CRUD操作和权限（Scaffold）
	实现对管理员的管理
	实现对用户的管理
	移植原有Common中的所有功能（Preset的通用分类和提醒和站内信息等）
	移植原有Finance中的所有功能（支付和结算和预存款）
	移植原有ZKShop中的所有功能（商品订单购物车）
