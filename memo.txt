{% area test_area %}
	{% default_widgets %}
{% endarea %}

转换成

{% area test_area %}
	{% widget logo %}
	{% widget login_info %}
	{% widget test_params { a: 1, b: 2, c: 3 } %}
{% endarea %}

文件
	templates/login_info.widget { "Name": { "zh": "登录信息" }, "Params": "参数信息???" }
	templates/login_info.html

html
	<div class='diy_area' area_id='test_area'>
		<div class='diy_widget' widget_id='random_123123123'></div>
		<div class='diy_widget' widget_id='random_123123122'></div>
		<div class='diy_widget' widget_id='random_123123121'></div>
	</div>

diy流程
	转换动态内容到固定内容
		把整个模板中area找出来
		把area中动态导入的所有widget，转换成静态的widget标签
		保存到App_Data/templates下
	编辑和保存
		让用户直接编辑html插入area标签
		让用户添加和拖动widget
		保存编辑后的结构到html中
			构成的html可能有多个，要找出所有用extend和include引入的html
			根据area id查找并保存到对应的html

动态注册widget
	diyManager.GetArea("test_area") // DiyArea
		.AddDefaultWidget("logo")
		.AddDefaultWidget("test_params", new { a: 1, b: 2, c: 3 })
		.AddDefaultWidgetAfter("logo", "login_info")
		.AddDefaultWidgetBefore("logo", "test_params", new { a: 1, b: 2, c: 3 });
	diyManager.GetArea("test_area").DefaultWidgets(); // List<DiyWidget>

规则
	include里面可以有include
	area里面不能有area

-----------------------------------------------------------------------------------------

ListItemsWithOptional<ListItemFromDataNotDeleted<UserRole>>>

近期任务
ok	权限提供器
ok	实现各项权限的自动检查
	实现角色的权限编辑
ok	实现下拉菜单
	实现批量操作
	实现回收站
ok	实现提交后自动关闭模态框并刷新表格
	实现TabFormBuilder
	实现FileUploader, Json, Label, RadioButtons, RegularExpression

编写教程
	使用入门
	插件系统
	控制器和模板系统
	数据库管理
	自动生成表单
	管理员后台
	自动生成增删查改
	定时任务

开发任务
ok	测试数据库增删查改和事件绑定（NHibernate支持事件）
ok	把原有ZKWebFramework中的所有功能移植过来
ok	实现static控制器
ok	添加后台页面
ok	实现从类生成表单html（FormBuilder）
	实现从类生成CRUD操作和权限（Scaffold）
	实现对管理员的管理
	实现对用户的管理
	移植原有Common中的所有功能（Preset的通用分类和提醒和站内信息等）
	移植原有Finance中的所有功能（支付和结算和预存款）
	移植原有ZKShop中的所有功能（商品订单购物车）
